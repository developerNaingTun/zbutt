using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using CristiPotlog.Controls;
using Transcode;
using System.Collections;
using ImportManager;
using System.Configuration;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using zbutt;

namespace zbutt
{
    public partial class formMain : Form
    {
        private Thread myThread;
        private string globalFileName;
        private iController icon = new iController();
        public const int HT_CAPTION = 0x2;
        [DllImportAttribute("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd,
            int Msg, int wParam, int lParam);
        [DllImportAttribute("user32.dll")]
        public static extern bool ReleaseCapture();
        public const int WM_NCLBUTTONDOWN = 0xA1;

        public formMain()
        {
            //icon.assign(this);
            InitializeComponent();
        }

        public void miceMove()
        {
            ReleaseCapture();
            SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
        }

        /// <summary>
        /// Rtf
        /// </summary>
        private void rtf_SelectFile()
        {
            openFileDialog1.Filter = "Rich Text Format (*.rtf)|*.rtf";
            if (icon.checkVersion())
            {
                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    globalFileName = openFileDialog1.FileName;
                    rtfloading.Active = true;
                    btnSelectRtf.Enabled = false;
                    if (openFileDialog1.FileNames.Length > 1)
                    {
                        RTFFileNames = openFileDialog1.FileNames;
                        lstRtfFont.Items.Clear();
                        RTFFileLoadDel dg = new RTFFileLoadDel(RTFFilesLoad);
                        dg.BeginInvoke(openFileDialog1.FileNames, RTFLoadFin, null);
                        GenericEncodingFramework gef = new GenericEncodingFramework();
                        if (!gef.loaded)
                            gef.Load();
                        enclist.Items.Clear();
                        enclist.Items.Add("No Action");
                        foreach (TEncoding t in gef.getEncodings())
                            enclist.Items.Add(t.getFrom());
                    }
                    else
                    {
                        RTFFileNames = openFileDialog1.FileNames;
                        pageRtf2Load();
                    }
                }
            }
        }

        private delegate void RTFFileLoadDel(String[] p);
        private void RTFFilesLoad(string[] p)
        {
            RichTextParser rtp = new RichTextParser();
            RTFFileFonts = new ArrayList();
            fltran = new ArrayList();
            for (int i = 0; i < p.Length; i++)
            {
                ArrayList al = rtp.GetFonts(p[i]);
                RTFFileFonts.Add(al);
                foreach (String s in al)
                {
                    MethodInvoker mi = delegate
                    {
                        if (!FileExists(s))
                        {
                            fltran.Add(Transcode.Transcode.isTo(s));
                            lstRtfFont.Items.Add(s);
                        }
                    };
                    lstRtfFont.Invoke(mi);
                }
            }
        }

        private void RTFLoadFin(IAsyncResult ar)
        {
            AsyncResult result = (AsyncResult)ar;
            MethodInvoker fin = delegate
            {
                rtfloading.Active = false;
                loadword.Active = false;
                btnSelectRtf.Enabled = true;
                btnSelectWord.Enabled = true;
                wizard1.gotoPage(2);
            };
            wizard1.Invoke(fin);
        }
        private ArrayList RTFFileFonts;
        private bool FileExists(String font)
        {
            foreach (String s in lstRtfFont.Items)
            {
                if (s == font)
                    return true;
            }
            return false;
        }

        private ArrayList fltran;
        private String output;
        private void rtfConvert()
        {
            iController.start_transcode(globalFileName,fltran,output);
        }

        /// <summary>
        /// Word
        /// </summary>

        private void word_Selectfile()
        {
            openFileDialog1.Filter = "Microsoft Word (*.doc;*.docx)|*.doc;*.docx";
            if (icon.checkVersion())
            {
                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    btnSelectWord.Enabled = false;
                    loadword.Active = true;
                    if (openFileDialog1.FileNames.Length > 1)
                    {
                        WordFilesDel WFD = new WordFilesDel(Words2rtf);
                        WFD.BeginInvoke(openFileDialog1.FileNames, null, null);
                    }
                    else
                    {
                        globalFileName = openFileDialog1.FileName;
                        RTFFileNames = openFileDialog1.FileNames;
                        word2rtf(globalFileName);
                    }
                }
            }

        }
        private delegate void WordFilesDel(string[] filenames);
        private string[] RTFFileNames;
        private void Words2rtf(string[] filenames)
        {
            for (int i = 0; i < filenames.Length; i++)
            {
                formatConvert.iConverter FC = new formatConvert.iConverter(filenames[i], "rtf");
                filenames[i] = filenames[i].Substring(0, filenames[i].LastIndexOf('.')) + ".rtf";
                FC.convert();
            }
            RTFFileNames = filenames;
            lstRtfFont.Items.Clear();
            RTFFileLoadDel dg = new RTFFileLoadDel(RTFFilesLoad);
            dg.BeginInvoke(filenames, RTFLoadFin, null);
            GenericEncodingFramework gef = new GenericEncodingFramework();
            if (!gef.loaded)
                gef.Load();
            enclist.Items.Clear();
            enclist.Items.Add("No Action");
            foreach (TEncoding t in gef.getEncodings())
                enclist.Items.Add(t.getFrom());
        }

        private void word2rtf(string fileName)
        {

            formatConvert.iConverter formCov = new formatConvert.iConverter(fileName, "rtf");
            MethodInvoker mk = new MethodInvoker(formCov.convert);
            mk.BeginInvoke(new AsyncCallback(CallWordFinished),null);
            //formCov.convert();
        }
        private void CallWordFinished(IAsyncResult ar)
        {
            AsyncResult result = (AsyncResult)ar;
            MethodInvoker del = (MethodInvoker)result.AsyncDelegate;
            string wordfilename = globalFileName.Substring(0, globalFileName.IndexOf('.'));
            globalFileName = wordfilename + ".rtf";
            pageRtf2Load();
        }

        private delegate ArrayList DelGetFons(String fname);
        private DelGetFons dgf;
        private void pageRtf2Load()
        {
            lstRtfFont.Items.Clear();
            RichTextParser rtp = new RichTextParser();
            dgf = new DelGetFons(rtp.GetFonts);
            IAsyncResult a =  dgf.BeginInvoke(globalFileName,new AsyncCallback(CallBack),null);
        }

        private void CallBack(IAsyncResult ar)
        {
            AsyncResult result = (AsyncResult)ar;
            DelGetFons del =
                (DelGetFons)result.AsyncDelegate;
            ArrayList al = del.EndInvoke(ar);
            fltran = new ArrayList();
            MethodInvoker updatePages = delegate
            {
                foreach (String s in al)
                {
                    fltran.Add(Transcode.Transcode.isTo(s));
                    lstRtfFont.Items.Add(s);
                }
                GenericEncodingFramework gef = new GenericEncodingFramework();
                gef.Load();
                enclist.Items.Clear();
                enclist.Items.Add("No Action");
                foreach (TEncoding te in gef.getEncodings())
                {
                    enclist.Items.Add(te.getFrom());
                }
                rtfloading.Active = false;
                loadword.Active = false;
                btnSelectRtf.Enabled = true;
                btnSelectWord.Enabled = true;
                wizard1.gotoPage(2);
            };
            if (lstRtfFont.InvokeRequired)
            {
                this.Invoke(updatePages);
            }
            else
            {
                updatePages.Invoke();
            }
        }

        private void wordConvert()
        {
           //?? icon.start_transcode(globalFileName,fltran);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void pageWelcome_MouseDown(object sender, MouseEventArgs e)
        {
            miceMove();
        }

        private int RTFfindTranValue(String fontname)
        {
            for (int i = 0; i < lstRtfFont.Items.Count; i++)
            {
                if (fontname == lstRtfFont.Items[i].ToString())
                    return (int)fltran[i];
            }
            return -1;
        }
        private void btnRtfTrans_Click(object sender, EventArgs e)
        {
            if (RTFFileNames.Length > 1)
            {
                FolderBrowserDialog fbd = new FolderBrowserDialog();
                fbd.SelectedPath = System.IO.Directory.GetCurrentDirectory();
                if (fbd.ShowDialog() == DialogResult.OK)
                {
                    MethodInvoker mk = delegate
                    {
                        for (int i = 0; i < RTFFileFonts.Count; i++)
                        {
                            ArrayList Fonts = (ArrayList)RTFFileFonts[i];
                            ArrayList FonTran = new ArrayList();
                            for (int j = 0; j < Fonts.Count; j++)
                            {
                                FonTran.Add(RTFfindTranValue(Fonts[j].ToString()));
                            }
                            string orgfile = RTFFileNames[i];
                            string file = orgfile.Substring(orgfile.LastIndexOf('\\'));
                            output = fbd.SelectedPath+ "\\" + file + ".txt";
                            iController.start_transcode(orgfile, FonTran, output);
                        }
                    };
                    loadingRtfCircle.Active = true;
                    mk.BeginInvoke(FinSaveRTFs, null);
                }
            }
            else
            {
                saveFileDialog1.DefaultExt = ".txt";
                saveFileDialog1.FileName = globalFileName.Substring(0, globalFileName.Length - 3) + "txt";
                if (saveFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    output = saveFileDialog1.FileName;
                    loadingRtfCircle.Active = true;
                    timerRtf.Enabled = true;
                    myThread = new Thread(new ThreadStart(rtfConvert));
                    myThread.IsBackground = true;
                    myThread.Priority = ThreadPriority.Lowest;
                    myThread.Start();
                }
            }
        }

        private void FinSaveRTFs(IAsyncResult ar)
        {
            MethodInvoker mk = delegate
            {
                loadingRtfCircle.Active = false;
                wizard1.gotoPage(8);
            };
            wizard1.Invoke(mk);
        }
        
        private void btnSelectRtf_Click(object sender, EventArgs e)
        {
            rtf_SelectFile();
        }

        private void btnSelectWord_Click(object sender, EventArgs e)
        {
            word_Selectfile();
        }

        private void btnWordTrans_Click(object sender, EventArgs e)
        {
            loadingWordCircle.Active = true;

            myThread = new Thread(new ThreadStart(wordConvert));
            myThread.Start();
            preloadrtf.Enabled = true;
        }

        private void btnRtf_Click(object sender, EventArgs e)
        {
            wizard1.gotoPage(1);
        }

        private void btnWord_Click(object sender, EventArgs e)
        {
            wizard1.gotoPage(3);
        }

        private void formMain_Load(object sender, EventArgs e)
        {

        }

        private void timerRtf_Tick(object sender, EventArgs e)
        {
            if (myThread.IsAlive)
                loadingRtfCircle.Active = true;
            else
            {
                loadingRtfCircle.Active = false;
                wizard1.gotoPage(8);
                timerRtf.Enabled = false;
            }
        }

        private void timerWord_Tick(object sender, EventArgs e)
        {
            if (myThread.IsAlive)
                loadingWordCircle.Active = true;
            else
            {
                loadingWordCircle.Active = false;
                preloadrtf.Enabled = false;
            }
        }

        private void pageRtf_Click(object sender, EventArgs e)
        {

        }

        private void lstRtfFont_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lstRtfFont.SelectedIndex != -1)
            {
                enclist.SelectedIndex = (int)fltran[lstRtfFont.SelectedIndex] + 1;
            }
        }

        private void enclist_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (enclist.SelectedIndex != -1 && lstRtfFont.SelectedIndex != -1)
                fltran[lstRtfFont.SelectedIndex] = enclist.SelectedIndex - 1;
        }

        private void glassButton1_Click(object sender, EventArgs e)
        {
            wizard1.gotoPage(0);
        }

        private void btnText_Click(object sender, EventArgs e)
        {
            ArrayList al = SQLParser.FetchColumns("INSERT INTO `dl_lnk` (`id`, `f_id`, `link`, `country`, `downed`) VALUES (20, 12, 'http://www.mymyanmar.net/font.zip', 'iHost', 0),");
            foreach (string s in al)
                MessageBox.Show(s);
        }

        private void btnSql_Click(object sender, EventArgs e)
        {
            wizard1.gotoPage(4);
        }

        private void glassButton2_Click(object sender, EventArgs e)
        {
            openFileDialog1.Filter = "SQL Dump File (*.sql)|*.sql";
            openFileDialog1.Multiselect = false;
            if (icon.checkVersion())
            {
                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    sqlloadbtn.Enabled = false;
                    sqlcircle.Active = true;
                    LoadSQLFile(openFileDialog1.FileName);
                }
            }
            openFileDialog1.Multiselect = true;
        }

        private void LoadSQLFile(string p)
        {
            LoadSQLDel dl = new LoadSQLDel(SQLParser.getTables);
            dl.BeginInvoke(p,SQLLoadCallBack,null);
        }

        private delegate ArrayList LoadSQLDel(string p);

        private ArrayList SQLTables;
        private void SQLLoadCallBack(IAsyncResult ar)
        {
            AsyncResult result = (AsyncResult)ar;
            LoadSQLDel del =
                (LoadSQLDel)result.AsyncDelegate;
            SQLTables = del.EndInvoke(ar);
            MethodInvoker mk = delegate
            {
                foreach (TSQLTable s in SQLTables)
                {
                    lstsqltables.Items.Add(s.getname());
                }
                sqlloadbtn.Enabled = true;
                sqlcircle.Active = false;
                wizard1.gotoPage(6);
            };
            lstsqltables.Invoke(mk);
        }

        private void lstsqltables_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lstsqltables.SelectedIndex != -1)
            {
                sqlcols.Items.Clear();
                TSQLTable t = (TSQLTable)SQLTables[lstsqltables.SelectedIndex];
                foreach (String s in t.getcols())
                {
                    sqlcols.Items.Add(s);
                }
            }
        }
    }
}